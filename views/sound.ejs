<html>
	<head>
		<title>Training a neural network to paint an image - Synaptic</title>
		<link rel="icon" type="image/png" href="img/favicon.png">
		<meta charset="UTF-8">
		<meta name="description" content="Training a neural network to paint an image - Synaptic">
		<meta name="keywords" content="javascript,node.js,neural networks,lstm,long short term memory,library,synaptic">
		<meta name="author" content="Juan Cazala">
		<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
		<script src='/javascripts/synaptic.js'></script>
		<style>
			body { 
				font-family: 'Open Sans', sans-serif;
				position: relative;
				line-height: 120%;
				margin: 0px;
			}
			.container {
				width: 1024px;
				margin: 0 auto;
			}
			.title {
				text-align: center;
				color: rgb(125, 125, 125);
				font-size: 34px;
				padding-top: 50px;
				height: 50px;
				cursor: pointer;
			}
			.title b{
				color:rgb(50, 50, 50);;
			}
			.title:hover{
				opacity: .8;
			}
			.subtitle: {
				font-weight: bold;
			}

			p {
				padding: 10px;
				font-size: 13px;
			}
			a{
				color: black;
				font-weight: bold;
			}
			.image_frame img, canvas {
				border: 1px solid lightgray;
				box-shadow: 0 0 10px lightgray;
				padding: 2px;
				margin-right: 10px;
				margin-bottom: 10px;
				display: block;
			}

			.image_frame {
				display: inline-block;
				text-align: center;
				font-size: 12px;
			}

			.train {
				display: none;
			}
		</style>
		<script>

			var perceptron = null;
			var liquidint = null;
			var worker = null;
			var index = 0;
			var audio_data = null;
			var canvas = null;
			var context = null;
			var size = 125 * 125;
			var iteration = 0;
			var to = null;
			var line_color = "#000000";
			var sound_length = 1024;


			var character = ['a', 'b', 'c']

			var generate_random_array = function(length){
				var data = [];
				for (var i = 0; i < sound_length; i++) {
					data[i] = (((Math.cos(i/40)+0.0*Math.sin(i/10))+1)/3)+0.1;
				};
				return data;
			}

			var generate_sound_array = function(chars, length){
				var data = [];
				for (var i = chars.length - 1; i >= 0; i--) {
					for (var i = 0; i < sound_length; i++) {
						data[i] = Math.abs(Math.cos(i/40));
					};
				};
				return data;
			}


			var sound_data = generate_random_array(sound_length);

			var train = function(){
				iteration = 0;
				to && clearTimeout(to);

				var input = 1;
				var pool = 60;
				var output = 1;
				var connections = 30;
				var gates = 10;

				perceptron = new Architect.Liquid(input, pool, output, connections, gates);

		        $(".train").show();
				preview();
			}

			var iterate = function(){

				for (var t = 0; t < sound_length; t++) {
					perceptron.activate([t/sound_length]);
					perceptron.propagate(.1, [sound_data[t]])
				};
				preview();
			}

			var preview = function(){
				$("#log").html("Iterations: " + iteration++);
				var output_sound = [];
				for (var t = 0; t < sound_length; t++)
				{
					output_sound[t] = perceptron.activate([t/sound_length]);
				}

				var input_canvas = document.getElementById('input_canvas').getContext('2d');
				var output_canvas = document.getElementById('output_canvas').getContext('2d');

				draw(input_canvas, sound_data);
				draw(output_canvas, output_sound);
				
				to = setTimeout(iterate,16);
			}

			var draw = function(context, data){
				context.clearRect ( 0 , 0 , sound_length, 125 );
				context.fillStyle = line_color;
				for (var i = 0; i < data.length; i++) {
					context.fillRect(i, data[i]*125, 1, 1);
				};
			}

		</script>
	</head>
	<body>
		<div class="container"><div class='title' onclick="window.location='index.html';"><b></b></div><div style="font-weight: bold;">Recognize speech</div>
		<p>Ideally, in this demo, a <a href='http://en.wikipedia.org/wiki/Liquid_state_machine'>Liquid State Machine</a> network (2 inputs, 80 nodes in the pool, 120 connections, 40 gates, 1 outputs) will be trained with a frame of 10 mel-scaled fourier coefficients (a[f]) of a sound file as input, and a character index as ouput (c[i]). After each utterance, the network will be directed to produce a character index, which will be concatenated into a string.</p>
		<p> Start training: <button onclick="train();">START</button></p><p id="log" class="log"></p>
		<div class="train">
		<div class="image_frame"><canvas id='input_canvas' width =1024 height=125></canvas><span>input</span></div>
		<div class="image_frame"><canvas id='output_canvas' width =1024 height=125></canvas><span>output</span></div>
		<p>It may take a few thousand iterations for the output to start looking like the original</p>
		</div>
	</div>
	</body>
</html>